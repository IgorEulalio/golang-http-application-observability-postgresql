apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: repository-service
  name: repository-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: repository-service
  strategy: {}
  template:
    metadata:
      labels:
        app: repository-service
    spec:
      containers:
      - image: igoreulalio/repository-service:v7
        env: 
          - name: OTEL_COLLECTOR_ENDPOINT
            value: otel-collector-service
          - name: SERVICE_NAME
            value: REPOSITORY_SERVICE
          - name: RABBITMQ_HOST
            value: rabbitmq-service
          - name: RABBITMQ_PORT
            value: "5672"
          - name: DB_HOST
            value: postgres-service
          - name: CONFIGURATION_SERVICE_URL
            value: http://configuration-service:8081
        envFrom:
          - secretRef:
              name: postgres-credentials
        name: repository-service
        resources:
          requests:
            cpu: "250m"
            memory: "500Mi"
          limits:
            cpu: "250m"
            memory: "500Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: repository-service
spec:
  selector:
    app: repository-service
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: repository-ingress
#   namespace: development
#   annotations:
#     alb.ingress.kubernetes.io/scheme: internet-facing
#     alb.ingress.kubernetes.io/target-type: ip ## requirement of using AWS VPC CNI 
#     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 8080}]'
#     # alb.ingress.kubernetes.io/group.name: repository
# spec:
#   ingressClassName: alb
#   rules:
#     - http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: repository-service
#                 port:
#                   number: 8080


                  
